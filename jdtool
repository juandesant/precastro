#! /usr/bin/env python
# -*- python -*-

"""
jdtool <command> [arguments...]

This is a tool for performing various date/time related conversions
using the 'precastro' Python module.

Subcommands are:

"""

import sys, os, math
import precastro

## quickutil: die usage
#- snippet: die.py (2012 Oct 01)
#- SHA1: 3bdd3282e52403d2dec99d72680cb7bc95c99843
def die (fmt, *args):
    if not len (args):
        raise SystemExit ('error: ' + str (fmt))
    raise SystemExit ('error: ' + (fmt % args))
#- snippet: usage.py (2012 Oct 01)
#- SHA1: ac032a5db2efb5508569c4d5ba6eeb3bba19a7ca
def showusage (docstring, short, stream, exitcode):
    if stream is None:
        from sys import stdout as stream
    if not short:
        print >>stream, 'Usage:', docstring.strip ()
    else:
        intext = False
        for l in docstring.splitlines ():
            if intext:
                if not len (l):
                    break
                print >>stream, l
            elif len (l):
                intext = True
                print >>stream, 'Usage:', l
        print >>stream, \
            '\nRun with a sole argument --help for more detailed usage information.'
    raise SystemExit (exitcode)

def checkusage (docstring, argv=None, usageifnoargs=False):
    if argv is None:
        from sys import argv
    if len (argv) == 1 and usageifnoargs:
        showusage (docstring, True, None, 0)
    if len (argv) == 2 and argv[1] in ('-h', '--help'):
        showusage (docstring, False, None, 0)

def wrongusage (docstring, *rest):
    import sys
    intext = False

    if len (rest) == 0:
        detail = 'invalid command-line arguments'
    elif len (rest) == 1:
        detail = rest[0]
    else:
        detail = rest[0] % tuple (rest[1:])

    print >>sys.stderr, 'error:', detail, '\n' # extra NL
    showusage (docstring, True, sys.stderr, 1)
## end:


def cmd_c2m (args):
    """c2m <year> <month> <frac.day> - calendar to MJD"""

    if len (args) != 3:
        wrongusage (__doc__, 'c2m expected exactly 3 arguments')

    year = int (args[0])
    month = int (args[1])
    day = float (args[2])
    iday = int (math.floor (day))
    fday = day - iday

    t = precastro.Time ().fromfdcal (year, month, iday, fday, 'UTC')
    print '%.4f' % t.asMJD ()


def cmd_lc2m (args):
    """lc2m <year> <month> <day> <hour> <minute> <second> - long calendar to MJD"""

    if len (args) != 6:
        wrongusage (__doc__, 'lc2m expected exactly 6 arguments')

    year = int (args[0])
    month = int (args[1])
    day = int (args[2])
    hour = int (args[3])
    minute = int (args[4])
    second = float (args[5])

    fday = (hour + minute / 60. + second / 3600.) / 24
    t = precastro.Time ().fromfdcal (year, month, day, fday, 'UTC')
    print '%.4f' % t.asMJD ()


def cmd_m2c (args):
    """m2c <MJD> - MJD to calendar"""

    if len (args) != 1:
        wrongusage (__doc__, 'm2c expected exactly 1 argument')

    mjd = float (args[0])
    t = precastro.Time ().fromMJD (mjd, 'UTC')
    print t.fmtcalendar ()


def _fullusage ():
    usagestr = __doc__

    g = globals ()
    cnames = sorted (n for n in g.iterkeys () if n.startswith ('cmd_'))

    for cname in cnames:
        usagestr += '  jdtool ' + g[cname].__doc__ + '\n'

    return usagestr

usagestr = _fullusage ()


def driver (argv):
    checkusage (usagestr, argv, usageifnoargs=True)

    if len (argv) < 2:
        wrongusage (usagestr, 'need to specify a command')

    func = globals ().get ('cmd_' + argv[1])

    if func is None:
        wrongusage (usagestr, 'no such command "%s"', argv[1])

    func (argv[2:])


if __name__ == '__main__':
    driver (sys.argv)
